Unity is always in 3D, even when switched to 2D.
The Z-position of sprites matters for rendering.
Sprites further from the camera get rendered first.

To avoid any problems with sprites becoming transparent or such place your sprite not on the background, but before it.
For example, camera would be on Z= -10, sprite at Z= -5 and background Z= 0. 
Alternatively keep the sprites where they are and move the background back.

First thing when setting up our play space is that we should specify how big it is.
An example target resolution could be an iPad air, which has a resolution of 2048x1536, the aspect ration is 1.333...
800/600 is also compatible with that.
We have to think about pixels per unit on the background because we have 16 blocks wide. We have an image that is 800 pixels wide.
We want 800 pixels to map to 16 world units so one world unit per block. World units are the positions in the Unity gamespace.
They're what you see in the transform.
Since we have 800 width, 16 units, we're going for 50 blocks per unit.

Ortographic camera doesn't consider how far an object is away from it. A perspective camera does.
Move the camera to the image's edge to see how wide it is. To the left and to the right and then consider the X sizes.

To mark the camera height, then consider that in our example our playspace is 16 units wide and our aspect ratio is 4/3 aka 1.33..
To get the height we do 16/4*3, making it 12 world units high. So our camera size should be 6, because that's half of it.
If you set the X position to 6 and Y to 6, then the camera becomes perfectly aligned.

A screenspace overlay is just relative to the screen and doesn't care about the sizes.

In order to make the ball fall, we need to first add to it some physics - a rigidbody. Mass is essentially 1kg per one unit.
Have to add something to check collision - add a circle collider from physics 2d. Collidors work by hitting other collidors.

Collidors allow us to trigger events. Simulate collisions, at the heart of all physical objects interacting with each other.
When two objects with colliders meet the engine sends a message to the objects. We intercept the message in our script.
Our script decides what to do next. They have to intersect during a frame, if an object was moving really fast then they might
not intersect during a frame and there would be no collision.

Two types of messages are passed - one, there is a collision, non-trigger collidors interact with non-trigger collidors.
When one or both of the objects have a trigger set, then a trigger happens.
When a collision happens, then physics are being calculated.

Types of colliders:
Static: if it has a collider but no rigidbody
Rigidbody: if it's got a rigidbody component
Kinematic: if 'Kinematic' ticked on rigidbody. Doesn't move on its own.

If it's going to move during the game, put a rigidbody on it. Avoid moving static colliders.
When implementing a collider, we have to intercept one of two messsages. More on it in the script LoseCollider.
IsTrigger makes the component ignore physics.

To make something bounce we use Physics Materials. It's used to manipulate friction and bounciness.
To apply a physics material, add it to the collider.

Disconnect can happen between the ball and paddle position depending on the execution order of their scrips.
In order to have a fixed order for the script execution go into Edit -> Project Settings -> Script Execution Order...
In our case with the Ball being executed before the Paddle, there will be no sync issues.